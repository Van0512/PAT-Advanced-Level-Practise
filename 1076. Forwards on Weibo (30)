#include <iostream>
#include <forward_list>
#include <queue>
using namespace std;

class MyGraph {
public:
	MyGraph(const int &vertexCnt);
	~MyGraph();
	void addEdge(const int &indexA, const int &indexB);		//增加一条从indexA指向indexB的弧。
	int BFS(const int &index, const int &level);		//返回从指定index开始，指定level的搜索顶点数，不包活index这点。
	void resetVertex();	//重置所有的顶点为未访问过。

private:
	struct Vertex {
		bool isVisited = false;
		forward_list<int> edge;		//边数值表示“指向该点”的顶点索引。
	};
	int vertexCnt;
	Vertex *pVertex;	//索引表示顶点。
};

inline
MyGraph::MyGraph(const int &vertexCnt) {
	this->vertexCnt = vertexCnt;
	pVertex = new Vertex[vertexCnt];
}

inline
MyGraph::~MyGraph() {
	delete[] pVertex;
}

inline
void MyGraph::addEdge(const int &indexA, const int &indexB) {
	pVertex[indexA].edge.push_front(indexB);
}

void MyGraph::resetVertex() {
	for (int i = 0; i < vertexCnt; ++i)
		pVertex[i].isVisited = false;
}

int MyGraph::BFS(const int &index, const int &level) {
	int layer = 0;
	int ret = 0;

	queue<int> que;
	que.push(index);
	pVertex[index].isVisited = true;
	auto oneLayerCnt = que.size();

	while (!que.empty()) {
		int tmp = que.front();
		que.pop();
		--oneLayerCnt;

		auto last = pVertex[tmp].edge.end();
		for (auto iter = pVertex[tmp].edge.begin(); iter != last; ++iter) {
			if (!pVertex[*iter].isVisited) {
				que.push(*iter);
				pVertex[*iter].isVisited = true;
				++ret;
			}
		}

		if (oneLayerCnt == 0) {
			++layer;
			oneLayerCnt = que.size();
		}
		if (layer == level) break;
	}

	return ret;
}


int main(void) {
	int num, level;
	cin >> num >> level;
	MyGraph graph(num);
	for (int i = 0; i < num; ++i) {
		int numsOfFlollow, follow;
		cin >> numsOfFlollow;
		for (int k = 0; k < numsOfFlollow; ++k) {
			cin >> follow;
			//i 关注了 follow-1，所以有一条从follow-1 到 i 的弧。
			graph.addEdge(follow - 1, i);
		}
	}
	
	int k, x;
	cin >> k;
	for (int i = 0; i < k; ++i) {
		cin >> x;
		cout << graph.BFS(x - 1, level) << endl;
		graph.resetVertex();
	}

	return 0;
}
